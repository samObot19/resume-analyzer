{
  "name": "Resume Analyzer Workflow (Google Drive)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "resume-uploaded",
        "responseMode": "onReceived",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": "={{ $json.body.drive_file_id }}",
        "options": {}
      },
      "id": "google-drive-download",
      "name": "Download from Google Drive",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 1,
      "position": [460, 300],
      "credentials": {
        "googleDriveApi": {
          "id": "YOUR_N8N_GDRIVE_CREDENTIAL_ID",
          "name": "Your n8n Google Drive Credential"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const binaryData = $input.first().binary.data;\nconst originalFilename = $('webhook-trigger').first().json.body.original_filename;\n\nconst pdfParse = require('pdf-parse');\n\nlet pdfText = '';\ntry {\n  const data = await pdfParse(binaryData);\n  pdfText = data.text;\n} catch (error) {\n  console.error('Failed to parse PDF:', error.message);\n  // Stop the workflow if parsing fails\n  return Promise.reject(new Error(`Failed to parse PDF from binary data: ${error.message}`));\n}\n\nreturn {\n  json: {\n    pdfText,\n    originalFilename,\n  }\n};"
      },
      "id": "extract-text",
      "name": "Extract Text from PDF",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "authentication": "apiKey",
        "resource": "chat",
        "model": "gpt-3.5-turbo",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "You are an expert resume parser. Extract the following information from the resume text and return it as valid JSON:\n\n- full_name: The person's full name\n- email: Email address\n- phone: Phone number\n- skills: Array of technical skills and competencies\n- experience_years: Total years of experience (as a number)\n- last_job_title: Most recent job title\n\nReturn ONLY the JSON object, no additional text or formatting."
            },
            {
              "role": "user",
              "content": "=Please analyze this resume and extract the required information:\n\n{{ $json.pdfText }}"
            }
          ]
        },
        "options": {}
      },
      "id": "openai-analysis",
      "name": "OpenAI Analysis",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "jsCode": "const openaiResponse = $input.first().json.choices[0].message.content;\n\nlet parsedData;\ntry {\n  const jsonMatch = openaiResponse.match(/\\{[\\s\\S]*\\}/);\n  if (jsonMatch) {\n    parsedData = JSON.parse(jsonMatch[0]);\n  } else {\n    parsedData = JSON.parse(openaiResponse);\n  }\n} catch (error) {\n  return Promise.reject(new Error(`Failed to parse OpenAI response: ${error.message}`));\n}\n\nconst dbData = {\n  filename: $('extract-text').first().json.originalFilename,\n  full_name: parsedData.full_name || '',\n  email: parsedData.email || '',\n  phone: parsedData.phone || '',\n  skills: parsedData.skills || [],\n  experience_years: parsedData.experience_years || 0,\n  last_job_title: parsedData.last_job_title || '',\n  uploaded_at: new Date().toISOString()\n};\n\nreturn {\n  json: dbData\n};"
      },
      "id": "parse-response",
      "name": "Parse OpenAI Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": "public",
        "table": "resumes",
        "columns": {
          "values": [
            {
              "column": "filename",
              "value": "={{ $json.filename }}"
            },
            {
              "column": "full_name",
              "value": "={{ $json.full_name }}"
            },
            {
              "column": "email",
              "value": "={{ $json.email }}"
            },
            {
              "column": "phone",
              "value": "={{ $json.phone }}"
            },
            {
              "column": "skills",
              "value": "={{ $json.skills }}"
            },
            {
              "column": "experience_years",
              "value": "={{ $json.experience_years }}"
            },
            {
              "column": "last_job_title",
              "value": "={{ $json.last_job_title }}"
            }
          ]
        },
        "options": {}
      },
      "id": "postgres-insert",
      "name": "Insert to PostgreSQL",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1340, 300]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Download from Google Drive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download from Google Drive": {
      "main": [
        [
          {
            "node": "Extract Text from PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Text from PDF": {
      "main": [
        [
          {
            "node": "OpenAI Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Analysis": {
      "main": [
        [
          {
            "node": "Parse OpenAI Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse OpenAI Response": {
      "main": [
        [
          {
            "node": "Insert to PostgreSQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "2",
  "id": "resume-analyzer-gdrive"
}
